version: '3.8'

x-postgres-env: &postgres-env
  POSTGRES_USER: airflow
  POSTGRES_PASSWORD: airflow
  POSTGRES_DB: airflow
  PGDATA: /var/lib/postgresql/data/pgdata

x-superset-common:
  &superset-common
  image: &superset-image epappas/superset:latest
  # image: &superset-image apache/superset:latest
  environment:
    &superset-env
    COMPOSE_PROJECT_NAME: 'superset'
    DATABASE_DB: 'db_superset'
    DATABASE_HOST: 'postgres'
    DATABASE_PASSWORD: 'airflow'
    DATABASE_USER: 'airflow'
    DATABASE_PORT: '5432'
    DATABASE_DIALECT: 'postgresql'
    # POSTGRES_DB: 'db_superset'
    # POSTGRES_USER: 'airflow'
    # POSTGRES_PASSWORD: 'airflow'
    PYTHONPATH: '/app/pythonpath:/app/docker/pythonpath_dev'
    REDIS_HOST: 'redis'
    REDIS_PORT: 6379
    FLASK_ENV: 'production'
    SUPERSET_ENV: 'production'
    SUPERSET_LOAD_EXAMPLES: 'yes'
    CYPRESS_CONFIG: 'false'
    SUPERSET_PORT: 8088
  user: 'root'
  volumes:
    &superset-volumes
    # /app/pythonpath_docker will be appended to the PYTHONPATH in the final container
    - ./superset/docker:/app/docker
    - superset_home:/app/superset_home
  networks:
    &superset-networks
    - superset
  depends_on:
    &superset-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

x-airflow-common:
  &airflow-common
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/db_airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/db_airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    INTEGRATION_STATSD: 'true'
    AIRFLOW__METRICS__STATSD_ON: 'True'
    AIRFLOW__METRICS__STATSD_HOST: statsd-exporter
    AIRFLOW__METRICS__STATSD_PORT: 9125
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__ENABLE_XCOM_PICKLING: 'true'
    # AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    # AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
  volumes:
    - ./lib:/opt/airflow/lib
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - /var/run/docker.sock:/var/run/docker.sock:rw
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
  privileged: true
  networks:
    &airflow-networks
    - airflow
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

volumes:
  postgres-db-volume:
    driver: local
  redis:
    driver: local
  superset_home:
    driver: local

networks:
  airflow:
  superset:

services:
  airflow:
    image: epappas/airflow:latest
    container_name: airflow
    build:
      context: .
      dockerfile: Dockerfile
    <<: *airflow-common

  airflow-webserver:
    image: ${AIRFLOW_IMAGE_NAME:-epappas/airflow:latest}
    container_name: airflow_webserver
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-scheduler:
    image: ${AIRFLOW_IMAGE_NAME:-epappas/airflow:latest}
    <<: *airflow-common
    container_name: airflow_scheduler
    command: scheduler
    restart: always

  airflow-worker:
    image: ${AIRFLOW_IMAGE_NAME:-epappas/airflow:latest}
    container_name: airflow_worker
    <<: *airflow-common
    command: celery worker
    restart: always

  # airflow-init:
  #   image: ${AIRFLOW_IMAGE_NAME:-epappas/airflow:latest}
  #   container_name: airflow_init
  #   <<: *airflow-common
  #   environment:
  #     <<: *airflow-common-env
  #     _AIRFLOW_DB_UPGRADE: 'true'
  #     _AIRFLOW_WWW_USER_CREATE: 'true'
  #     _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
  #     _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}

  flower:
    image: ${AIRFLOW_IMAGE_NAME:-epappas/airflow:latest}
    container_name: celery_flower
    <<: *airflow-common
    command: celery flower
    ports:
      - 5555:5555
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  postgres:
    image: epappas/postgres:latest
    build:
      context: ./db
      dockerfile: Dockerfile
    container_name: postgres
    environment:
      <<: *postgres-env
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    expose:
      - 5432
    ports:
      - "5432:5432"
    networks:
      - airflow
      - superset
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - 6379:6379
    networks:
      - airflow
      - superset
    volumes:
      - redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  statsd-exporter:
    image: apache/airflow:airflow-statsd-exporter-2020.09.05-v0.17.0
    ports:
      - "9125:9125"
      - "9125:9125/udp"
      - "29102:9102"
    networks:
      - airflow
      - superset

  grafana:
    image: grafana/grafana
    ports:
      - "23000:3000"
    networks:
      - airflow
      - superset
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:3000/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  superset:
    image: epappas/superset:latest
    container_name: superset
    build:
      context: ./superset
      dockerfile: Dockerfile
    <<: *superset-common

  superset-app:
    container_name: superset_app
    command: ["/app/docker/docker-bootstrap.sh", "app-gunicorn"]
    ports:
      - 8088:8088
    restart: unless-stopped
    <<: *superset-common

  superset-init:
    container_name: superset_init
    command: ["/app/docker/docker-init.sh"]
    <<: *superset-common

  superset-worker:
    container_name: superset_worker
    command: ["/app/docker/docker-bootstrap.sh", "worker"]
    restart: unless-stopped
    <<: *superset-common

  superset-worker-beat:
    container_name: superset_worker_beat
    command: ["/app/docker/docker-bootstrap.sh", "beat"]
    restart: unless-stopped
    <<: *superset-common
